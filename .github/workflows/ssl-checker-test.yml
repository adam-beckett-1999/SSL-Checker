name: Python SSL Checker Tests

on:
  push:
    branches:
      - '*'
  pull_request: {}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: 3.12
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings.
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test the script
      run: |
        python ssl_checker.py -h
    - name: Test a host
      run: |
        python ssl_checker.py -H example.com
    - name: Test JSON output
      run: |
        python ssl_checker.py -H example.com -j
    - name: Test read list from file
      run: |
        echo -e "example.com\ngithub.com" > list
        python ssl_checker.py -f list
    - name: Test CSV output
      run: |
        python ssl_checker.py -H example.com -c test.csv
        test -f test.csv
    - name: Test JSON file output
      run: |
        python ssl_checker.py -H example.com github.com -J
        test -f example.com.json
    - name: Test with port
      run: |
        python ssl_checker.py -H example.com:443
    - name: Test summary output
      run: |
        python ssl_checker.py -H example.com -S
    - name: Test HTML export
      run: |
        python ssl_checker.py -H example.com -x
        ls -1 *.html | head -n1 | xargs -r test -f
    - name: (Non-blocking) Test analyze flag via CLI
      continue-on-error: true
      run: |
        # This uses SSL Labs API and can be slow or rate-limited; don't fail the build if it flakes
        timeout 120s python ssl_checker.py -H example.com -a -j || true

    # API tests via uvicorn directly
    - name: Start API server (uvicorn)
      run: |
        python -m uvicorn api:app --host 127.0.0.1 --port 8080 &
        echo $! > uvicorn.pid
        for i in {1..30}; do curl -fsS http://127.0.0.1:8080/healthz && break; sleep 1; done
    - name: Test API single host
      run: |
        code=$(curl -s -o /tmp/out.json -w "%{http_code}" http://127.0.0.1:8080/api/v1/check/example.com)
        echo "$code" && test "$code" = "200"
        grep -q 'example.com' /tmp/out.json
    - name: Test API multiple hosts
      run: |
        curl -s "http://127.0.0.1:8080/api/v1/check?hosts=example.com&hosts=github.com:443" > /tmp/multi.json
        grep -q 'example.com' /tmp/multi.json
        grep -q 'github.com' /tmp/multi.json
    - name: Test API error path
      run: |
        code=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:8080/api/v1/check/notarealhost.invalid)
        echo "$code" && test "$code" = "502"
    - name: (Non-blocking) Test API analyze flag
      continue-on-error: true
      run: |
        # Non-blocking due to SSL Labs API dependency
        timeout 120s curl -s "http://127.0.0.1:8080/api/v1/check/example.com?analyze=true" | head -c 200 || true
    - name: Stop API server
      if: always()
      run: |
        kill $(cat uvicorn.pid) || true

    # Docker image tests
    - name: Build Docker image
      run: |
        docker build -t ssl-checker-api .
    - name: Run Docker container and test endpoints
      run: |
        docker run -d -p 18000:8000 --name sslc_api_test ssl-checker-api
        # Wait for readiness
        for i in {1..30}; do curl -fsS http://127.0.0.1:18000/healthz && break; sleep 1; done
        curl -s http://127.0.0.1:18000/api/v1/check/example.com | grep -q 'example.com'
        curl -s "http://127.0.0.1:18000/api/v1/check?hosts=example.com&hosts=github.com:443" | grep -q 'github.com'
        code=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:18000/api/v1/check/notarealhost.invalid)
        echo "$code" && test "$code" = "502"
        docker rm -f sslc_api_test

    - name: Run Docker container with API key and test auth/SSRF
      run: |
        docker run -d -p 18001:8000 -e SSL_CHECKER_API_KEY=ci-key --name sslc_api_sec ssl-checker-api
        for i in {1..30}; do curl -fsS http://127.0.0.1:18001/healthz && break; sleep 1; done
        # Expect 403 without key
        code=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:18001/api/v1/check/example.com)
        echo "$code" && test "$code" = "403"
        # Works with key
        code=$(curl -s -H 'X-API-Key: ci-key' -o /dev/null -w "%{http_code}" http://127.0.0.1:18001/api/v1/check/example.com)
        echo "$code" && test "$code" = "200"
        # SSRF guard should reject loopback
        code=$(curl -s -H 'X-API-Key: ci-key' -o /dev/null -w "%{http_code}" http://127.0.0.1:18001/api/v1/check/127.0.0.1)
        echo "$code" && test "$code" = "400"
        docker rm -f sslc_api_sec
